<!DOCTYPE html>
<html>
<head>
    <title>Work Item Creator</title>
    <!--  (c) 2015,2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Thu Apr 07 2016 10:30:13 GMT-0400 (EDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Thu Apr 07 2016 10:30:13 GMT-0400 (EDT)";
        var CHECKSUM = 3903657395;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define("WICreator", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'selector_box'},
        {xtype:'container',itemId:'display_box'}
    ],

    integrationHeaders : {
        name : "WICreator"
    },

     //this.getSetting('testCaseType');
    config: {
        defaultSettings: {
            parentFeature:'',
            planEst:'',
            usName:'',
            showGrid:false
        }
    },

    getSettingsFields: function() {
        var me = this;

        return [
            {
                name: 'parentFeature',
                xtype: 'rallycombobox',
                fieldLabel: 'Parent Feature',
                labelWidth: 125,
                labelAlign: 'left',
                minWidth: 200,
                margin: 10,
                autoExpand: false,
                alwaysExpanded: false,                
                store:me.parentFeatures,
                readyEvent: 'ready'
            },
            {
                name: 'planEst',
                xtype: 'textfield',
                fieldLabel: 'Plan Estimate',
                labelWidth: 125,
                labelAlign: 'left',
                minWidth: 50,
                margin: 10
            },
            {
                name: 'usName',
                xtype: 'textfield',
                fieldLabel: 'Default User Story Name',
                labelWidth: 125,
                labelAlign: 'left',
                minWidth: 200,
                margin: 10
            },
            {
                name: 'showGrid',
                xtype: 'rallycheckboxfield',
                boxLabelAlign: 'after',
                fieldLabel: '',
                margin: '0 0 25 200',
                boxLabel: 'Show Grid<br/><span style="color:#999999;"><i>Tick to show the grid of User Stories for the Feature selected</i></span>'
            }

        ];
    },


                        
    launch: function() {
        var me = this;

        var model_filter = [{property:'Project.ObjectID',value:me.getContext().get('project').ObjectID}];

        Rally.data.ModelFactory.getModel({
            type: 'UserStory',
            success: function(model){
                me.model = model;
                me._addUSForm();
                me._loadAStoreWithAPromise('PortfolioItem/Feature',['ObjectID','Name'],model_filter).then({
                    scope:me,
                    success:function(store){
                        console.log('features>>',store);
                        me.parentFeatures = store;
                    }
                });
            },
            scope: me
        });


        // this.setLoading("Loading stuff...");
        
        // var model_name = 'Defect',
        //     field_names = ['Name','State'];
        
        // this._loadAStoreWithAPromise(model_name, field_names).then({
        //     scope: this,
        //     success: function(store) {
        //         this._displayGrid(store,field_names);
        //     },
        //     failure: function(error_message){
        //         alert(error_message);
        //     }
        // }).always(function() {
        //     me.setLoading(false);
        // });
    },

      
    _addUSForm: function(){
        var me = this;
        var selector_box = me.down('#selector_box');
            selector_box.removeAll();
        var currentTime = Ext.Date.format(new Date(), 'm/d/Y g:i:s A');
        var usn =  me.getSetting('usName')+ ' ' + currentTime;
        selector_box.add({
                xtype: 'textfield',
                itemId:'userStoryName',
                name: 'name',
                fieldLabel: 'User Story Name',
                width:400,
                value:usn,
                allowBlank: false  // requires a non-empty value
        });

        selector_box.add({
            xtype: 'rallybutton',
            text: 'Create',
            // width: 200,
            margin:10,
            cls: 'primary',
            listeners: {
                click: me._createUserStories,
                scope: me
            }
        });
    },

    _createUserStories: function(){
        //Create a defect record, specifying initial values in the constructor
        var me = this;
        //console.log('Feature >>',me.getSetting('parentFeature'));
        var currentTime = Ext.Date.format(new Date(), 'm/d/Y g:i:s A');
        var usn =  me.getSetting('usName')+ ' ' + currentTime;
        me.down('#userStoryName').setValue(usn);

        var record = Ext.create(me.model, {
            Name: me.down('#userStoryName').value,
            ScheduleState:'Defined',
            Project:me.getContext().get('project'),
            Owner:me.getContext().get('user'),
            PortfolioItem:me.getSetting('parentFeature'),
            PlanEstimate:me.getSetting('planEst')
        });

        record.save({
            callback: function(result, operation) {
                if(operation.wasSuccessful()) {
                    //Get the new defect's objectId
                    var objectId = result.get('ObjectID');
                    if(me.getSetting('showGrid') == true || me.getSetting('showGrid') == "true" ){
                        var model_filters = [{property:'PortfolioItem',value:me.getSetting('parentFeature')}];
                        var field_names = ['Name','ScheduleState','Project','Owner','Feature','PlanEstimate']

                        this._loadAStoreWithAPromise('UserStory', field_names,model_filters).then({
                            scope: this,
                            success: function(store) {
                                this._displayGrid(store,field_names);
                            },
                            failure: function(error_message){
                                alert(error_message);
                            }
                        }).always(function() {
                            me.setLoading(false);
                        });
                    }
                    // me.down('selector_box').removeAll();
                    // me._addUSForm();
                    // var msg = 'User Story '+ me.down('#userStoryName').value + ' with (ObjectID - ' + objectId + ') created! ';
                    // me.down('selector_box').add({
                    //     xtype: 'text',
                    //     text: msg,
                    //     id:'successMsg'
                    // });
                }
            },
            scope:me
        });

    },


    _loadWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID']
        };
        this.logger.log("Starting load:",config.model);
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },

    _loadAStoreWithAPromise: function(model_name, model_fields, model_filters){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        this.logger.log("Starting load:",model_name,model_fields);
          
        Ext.create('Rally.data.wsapi.Store', {
            model: model_name,
            fetch: model_fields,
            filters: model_filters
        }).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(this);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    _displayGrid: function(store,field_names){
        this.down('#display_box').removeAll();
        this.down('#display_box').add({
            xtype: 'rallygrid',
            store: store,
            columnCfgs: field_names
        });
    },
    
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    }
});

            
               Rally.launchApp('WICreator', {
                   name: 'Work Item Creator'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>